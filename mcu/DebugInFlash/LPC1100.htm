<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\DebugInFlash\LPC1100.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\DebugInFlash\LPC1100.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Thu Dec 16 11:32:42 2010
<BR><P>
<H3>Maximum Stack Usage =         56 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[df7e18]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[df5a78]">__main</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[dfac08]">penDetectTest</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[df9ba0]">defaultVectorHandle</a>
 <LI><a href="#[dfac08]">penDetectTest</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[df5a78]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ded684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[df585c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ded684]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[df5a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ded648]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df585c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ded60c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ded5d0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ded42c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ded42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ded42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ded33c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[df0294]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df23a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[df3750]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[df2e68]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[df2ee0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[df32a0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[df3138]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[df2d78]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[df2df0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[df31b0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[df30c0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[df369c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[df34f8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[df3480]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[df3408]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[df3390]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[df3318]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[df35ac]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[df2d3c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[df3228]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[df3048]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[df3624]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[deda08]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[deeb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[def13c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[deef5c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[deef20]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[def088]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[def1f0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[def010]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[df585c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ded648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[df5a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[df2454]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[df20d0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[df1194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[df23a0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[df0294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[df23dc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[df22ec]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[df0ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[dfabcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df2328]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[defc7c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df0ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[deeb24]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[deda08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[deeb60]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[deeae8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[df83f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[df9aec]"></a>zyIrqDisable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zy_if.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[df8ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrEnable
<LI><a href="#[df8cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrDisable
<LI><a href="#[df8d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrClr
<LI><a href="#[df8d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[df8d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
<LI><a href="#[dfaaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[dfab54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[df9ab0]"></a>zyIrqEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, zy_if.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[df8ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrEnable
<LI><a href="#[df8cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrDisable
<LI><a href="#[df8d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrClr
<LI><a href="#[df8d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
<LI><a href="#[df8d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
<LI><a href="#[dfaaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[dfab54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[df1d10]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[dfac08]"></a>penDetectTest</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, test.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> test.o(.text)
<LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[dfabcc]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[dfaaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
<LI><a href="#[dfaadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walTopInit
<LI><a href="#[dfab18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[dfab54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[dfab90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df22ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[dfa758]"></a>myDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dfa5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[dfa71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onLight500
</UL>

<P><STRONG><a name="[dfa71c]"></a>onLight500</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dfa758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>

<P><STRONG><a name="[dfa6e0]"></a>ADCInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)

<P><STRONG><a name="[dfab18]"></a>uartInit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df5dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dfabcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dfa6a4]"></a>uartRecvByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dfa668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRecvStr
</UL>

<P><STRONG><a name="[dfa668]"></a>uartRecvStr</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dfa6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRecvByte
</UL>

<P><STRONG><a name="[dfa62c]"></a>sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)

<P><STRONG><a name="[dfa5f0]"></a>active</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dfaadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walTopInit
</UL>

<P><STRONG><a name="[dfa5b4]"></a>reset</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reset
</UL>
<BR>[Calls]<UL><LI><a href="#[dfa758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[dfaadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walTopInit
</UL>

<P><STRONG><a name="[dfaadc]"></a>walTopInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = walTopInit &rArr; reset
</UL>
<BR>[Calls]<UL><LI><a href="#[dfa5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[dfa5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active
</UL>
<BR>[Called By]<UL><LI><a href="#[dfabcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dfab90]"></a>pinInit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, LPC1100PinCfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dfabcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df9ba0]"></a>defaultVectorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, target.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vector_table.o(.constdata)
</UL>
<P><STRONG><a name="[dfab54]"></a>targetInit</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = targetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
<LI><a href="#[df9b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dfabcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df9b28]"></a>zyIfInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zy_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dfab54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[df8dcc]"></a>zyReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, zy_if.o(.text), UNUSED)

<P><STRONG><a name="[df8d90]"></a>zyHeapMalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df774c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[df8d54]"></a>zyHeapFree</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df75e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[dfaaa0]"></a>zyIsrSet</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, zy_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[dfabcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df8d18]"></a>zyIsrClr</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[df8cdc]"></a>zyIsrDisable</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[df8ca0]"></a>zyIsrEnable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, zy_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[df9aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>

<P><STRONG><a name="[df83f4]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_sys_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[deeae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[df0b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[df83b8]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_sys_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[def790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[df837c]"></a>_sys_open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8340]"></a>_sys_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8304]"></a>_sys_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df82c8]"></a>_sys_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df828c]"></a>_sys_ensure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8250]"></a>_sys_flen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8214]"></a>_sys_seek</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df81d8]"></a>_sys_istty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df819c]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8160]"></a>_sys_command_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8124]"></a>clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df80e8]"></a>time</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, rt_sys_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[df80ac]"></a>remove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8070]"></a>rename</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df8034]"></a>system</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_sys_c.o(.text), UNUSED)

<P><STRONG><a name="[df7b84]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[df7b48]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[df774c]"></a>malloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df4fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[df5280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[df8d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapMalloc
</UL>

<P><STRONG><a name="[df75e4]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[df5280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[df1ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[df8d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyHeapFree
</UL>

<P><STRONG><a name="[df5f64]"></a>mktime</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, mktime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df5d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[df5fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[df80e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[df5dfc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[df5dc0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dfab18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[df5d84]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[df5d48]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[df5fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>

<P><STRONG><a name="[df5280]"></a>__rt_heap_descriptor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[df75e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[df774c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[df5154]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[df5118]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[df5028]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[df4fec]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[df4fb0]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df1554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[df1ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[df774c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[df4f74]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df189c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[df4f38]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[df1554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[df1590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[df189c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[df1ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[df4b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[df5280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[df3750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[df4b3c]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[df4b00]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[df2760]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[df2724]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df1194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[df26e8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[df1ab8]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df75e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[df4fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[df189c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[df0870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[df0b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[df4f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[df1590]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[df1554]"></a>__rt_heap_expand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[df4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[df4fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[df1194]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[df2724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[df7e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[df20d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[df0ce4]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[defc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[df0c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[df22ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[df0b7c]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[df83f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df189c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[df0870]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[def790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[df189c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[def790]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[df83b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[df0870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[df7e18]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_sys_s.o(rt_sys))
<BR><BR>[Called By]<UL><LI><a href="#[df1194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df5fa0]"></a>_tm_carry</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mktime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df5d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[df5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[df0c6c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[df0ce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
